#!/usr/bin/bash

function dbg {
    echo $@
}


BOLD=$'\e[1;31m'
RESET=$'\e[0m'

export DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source $DIR/.lib/utils.sh
export WORLD=$DIR/world
export CHEST=$WORLD/cottage/
CAVE=$FOREST/cave
DESERT=$WORLD/desert
CASTLE=$WORLD/castle
LIBRARY=$CASTLE/library
CATACOMBS=$LIBRARY/catacombs
RUINS=$DESERT/ruins

declare -A ITEMS
declare -A POSSIBLE_POINTS
declare -a SCORING_FUNCTIONS
declare -A PRINTING_FUNCTIONS

export ITEMS
export POSSIBLE_POINTS
export SCORING_FUNCTIONS
export PRINTING_FUNCTIONS

GAME_OVER=0
BEAR_IN_CHEST=0
WRONG_WATERINGHOLE=0
SCORE=0


function load_all_scoring {
    __pta_load_all "$SCORE_DIR"
}

function score_all {
    for scoring_function in "${SCORING_FUNCTIONS[@]}"; do
        "$scoring_function"
    done
    calculate_total
}

function print_bear_in_chest {
    cat << EOF

\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/
You've put a bear in your treasure chest!
It eats all your points: -$SCORE Points!
And then it eats you!

                        ${BOLD}GAME OVER${RESET}

Type ${BOLD}exit${RESET} and press ${BOLD}[Enter]${RESET}
/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\
EOF
}

function print_wrong_wateringhole {
    cat << EOF
    
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You wasted precious time touching watering holes that
only SEEMED to be there. You died of thirst, and the husk
of your body was devoured by the desert.

                        ${BOLD}GAME OVER${RESET}

Type ${BOLD}exit${RESET} and press ${BOLD}[Enter]${RESET}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EOF
}

function print_you_win {
    cat << EOF

                          ðŸŽŠ YOU WIN!!! ðŸŽŠ

You are the greatest terminal jockey in all the land! Congratulations!

Type ${BOLD}exit${RESET} and press ${BOLD}[Enter]${RESET}

EOF
}

function calculate_total {
    SCORE=0
    for p in "${ITEMS[@]}"; do
        SCORE=$((SCORE + p))
    done
    echo $SCORE > $RESOURCES/current_score
}


function generic_print_function {
    local key="$1"
    if [[ ${ITEMS[$key]} -ne 0 ]] ; then
        printf "%9s: %d Points\n" "${key^^}" ${ITEMS[$key]}
    else
        printf "%9s: Unfinished\n" "${key^^}"
    fi
}

function print_score {
    echo ""
    echo "This program will tell you how you have done."
    echo "============================================="
    echo "How did you do for the first steps?"
    "${PRINTING_FUNCTIONS[cottage]}"

    echo ""
    echo "Now, how about the rest?"
    echo "========================"
    local key
    for key in "${!PRINTING_FUNCTIONS[@]}"; do
        [[ "$key" == "cottage" ]] && continue
        if [[ "${PRINTING_FUNCTIONS[$key]}" == "generic_print_function" ]]; then
            generic_print_function "$key"
        else
            "${PRINTING_FUNCTIONS[$key]}"
        fi
    done
     
    echo "==================="
    echo "TOTAL SCORE: $SCORE"
    echo ""
    handle_endgame
}

function handle_endgame {
    if [[ $GAME_OVER -eq 0 ]]; then
        if [[ $SCORE -ge 32 ]]; then
            print_you_win
            exit
        fi
    else
        if [[ $BEAR_IN_CHEST -ne 0 ]]; then  
            print_bear_in_chest
            exit
        elif [[ $WRONG_WATERINGHOLE -ne 0 ]]; then
            print_wrong_wateringhole
            exit
        fi
    fi
}

# Set defaults
score_only=
possible_only=
function parse_commandline {
    while [[ $# -gt 0 ]]; do
        _key="$1"
        case "$_key" in
            -q|--score)
                score_only="on"
                ;;
            --possible)
                possible_only="on"
                ;;
        esac
        shift
    done
}

parse_commandline "$@"
load_all_scoring
score_all
if [[ $score_only == "on" ]]; then
    echo -n $SCORE
elif [[ $possible_only == "on" ]]; then
    echo POSSIBLE
else
    print_score
fi
